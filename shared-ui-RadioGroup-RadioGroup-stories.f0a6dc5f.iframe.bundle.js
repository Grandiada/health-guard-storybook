"use strict";(self.webpackChunkhealthguard=self.webpackChunkhealthguard||[]).push([[882],{"./src/shared/ui/RadioGroup/RadioGroup.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DiaryIconRadioButton:()=>DiaryIconRadioButton,SymptomIconRadioButton:()=>SymptomIconRadioButton,TextRadioButton:()=>TextRadioButton,__namedExportsOrder:()=>__namedExportsOrder,default:()=>RadioGroup_stories});const _1_namespaceObject=__webpack_require__.p+"static/media/1.3a72ae67.png",Pill_namespaceObject=__webpack_require__.p+"static/media/Pill.e59f643d.png";var RadioGroup=__webpack_require__("./src/shared/ui/RadioGroup/RadioGroup.tsx"),react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const RadioGroup_stories={title:"Data Entry/RadioGroup",component:RadioGroup.E,parameters:{layout:"centered"},tags:["autodocs"]},TextRadioButton={args:{children:[],gap:"40px",value:"one",onChange:()=>{}},render:props=>{const[value,setValue]=react.useState(props.value);return(0,react.useEffect)((()=>{setValue(props.value)}),[props.value]),(0,jsx_runtime.jsxs)(RadioGroup.E,{gap:props.gap,onChange:value=>{setValue(value)},value,children:[(0,jsx_runtime.jsx)(RadioGroup.E.TextRadioButton,{label:"Low",value:"one"}),(0,jsx_runtime.jsx)(RadioGroup.E.TextRadioButton,{label:"Medium",value:"two"}),(0,jsx_runtime.jsx)(RadioGroup.E.TextRadioButton,{label:"High",disabled:!0,value:"three"})]})}},SymptomIconRadioButton={args:{children:[],gap:"40px",value:"one",onChange:()=>{}},render:props=>{const[value,setValue]=react.useState(props.value);return(0,react.useEffect)((()=>{setValue(props.value)}),[props.value]),(0,jsx_runtime.jsxs)(RadioGroup.E,{gap:props.gap,onChange:value=>{setValue(value)},value,children:[(0,jsx_runtime.jsx)(RadioGroup.E.IconRadioButton,{variant:"symptom",value:"one",iconUrl:_1_namespaceObject}),(0,jsx_runtime.jsx)(RadioGroup.E.IconRadioButton,{variant:"symptom",value:"two",iconUrl:_1_namespaceObject}),(0,jsx_runtime.jsx)(RadioGroup.E.IconRadioButton,{variant:"symptom",disabled:!0,value:"three",iconUrl:_1_namespaceObject})]})}},DiaryIconRadioButton={args:{children:[],gap:"40px",value:"one",onChange:()=>{}},render:props=>{const[value,setValue]=react.useState(props.value);return(0,react.useEffect)((()=>{setValue(props.value)}),[props.value]),(0,jsx_runtime.jsxs)(RadioGroup.E,{gap:props.gap,onChange:value=>{setValue(value)},value,children:[(0,jsx_runtime.jsx)(RadioGroup.E.IconRadioButton,{variant:"diary",value:"one",iconUrl:Pill_namespaceObject}),(0,jsx_runtime.jsx)(RadioGroup.E.IconRadioButton,{variant:"diary",value:"two",iconUrl:Pill_namespaceObject}),(0,jsx_runtime.jsx)(RadioGroup.E.IconRadioButton,{variant:"diary",disabled:!0,value:"three",iconUrl:Pill_namespaceObject})]})}};TextRadioButton.parameters={...TextRadioButton.parameters,docs:{...TextRadioButton.parameters?.docs,source:{originalSource:'{\n  args: {\n    children: [],\n    gap: "40px",\n    value: "one",\n    onChange: () => {}\n  },\n  render: props => {\n    const [value, setValue] = React.useState(props.value);\n    useEffect(() => {\n      setValue(props.value);\n    }, [props.value]);\n    return <RadioGroup gap={props.gap} onChange={value => {\n      setValue(value);\n    }} value={value}>\r\n        <RadioGroup.TextRadioButton label="Low" value="one" />\r\n        <RadioGroup.TextRadioButton label="Medium" value="two" />\r\n        <RadioGroup.TextRadioButton label="High" disabled value="three" />\r\n      </RadioGroup>;\n  }\n}',...TextRadioButton.parameters?.docs?.source}}},SymptomIconRadioButton.parameters={...SymptomIconRadioButton.parameters,docs:{...SymptomIconRadioButton.parameters?.docs,source:{originalSource:'{\n  args: {\n    children: [],\n    gap: "40px",\n    value: "one",\n    onChange: () => {}\n  },\n  render: props => {\n    const [value, setValue] = React.useState(props.value);\n    useEffect(() => {\n      setValue(props.value);\n    }, [props.value]);\n    return <RadioGroup gap={props.gap} onChange={value => {\n      setValue(value);\n    }} value={value}>\r\n        <RadioGroup.IconRadioButton variant="symptom" value="one" iconUrl={Emoji} />\r\n        <RadioGroup.IconRadioButton variant="symptom" value="two" iconUrl={Emoji} />\r\n        <RadioGroup.IconRadioButton variant="symptom" disabled value="three" iconUrl={Emoji} />\r\n      </RadioGroup>;\n  }\n}',...SymptomIconRadioButton.parameters?.docs?.source}}},DiaryIconRadioButton.parameters={...DiaryIconRadioButton.parameters,docs:{...DiaryIconRadioButton.parameters?.docs,source:{originalSource:'{\n  args: {\n    children: [],\n    gap: "40px",\n    value: "one",\n    onChange: () => {}\n  },\n  render: props => {\n    const [value, setValue] = React.useState(props.value);\n    useEffect(() => {\n      setValue(props.value);\n    }, [props.value]);\n    return <RadioGroup gap={props.gap} onChange={value => {\n      setValue(value);\n    }} value={value}>\r\n        <RadioGroup.IconRadioButton variant="diary" value="one" iconUrl={Pill} />\r\n        <RadioGroup.IconRadioButton variant="diary" value="two" iconUrl={Pill} />\r\n        <RadioGroup.IconRadioButton variant="diary" disabled value="three" iconUrl={Pill} />\r\n      </RadioGroup>;\n  }\n}',...DiaryIconRadioButton.parameters?.docs?.source}}};const __namedExportsOrder=["TextRadioButton","SymptomIconRadioButton","DiaryIconRadioButton"]}}]);